import type { Maybe } from "Maybe"
import type { Random } from "Random"

import Dict from "Dictionary"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import { boolean, integer, pick } from "Random"
import String from "String"

import { ALPHABET, LETTER_HEADS, LETTER_TAILS } from "./Constants"



select :: Random -> Dictionary Char (List Char) -> Char -> Maybe Char
export select = (r, dict, c) => pipe(
  Dict.get($, dict),
  chain(pick($, r)),
)(c)

after :: Random -> Char -> Maybe Char
export after = (r, c) => pipe(
  select(r, LETTER_TAILS),
)(c)

before :: Random -> Char -> Maybe Char
export before = (r, c) => pipe(
  select(r, LETTER_HEADS),
)(c)

chars :: Random -> Integer -> List (Maybe Char)
export chars = (r, count) => List.repeatWith((_) => pick(ALPHABET, r), count)

canFollow :: Char -> Char -> Boolean
export canFollow = (a, b) => pipe(
  Dict.get($, LETTER_TAILS),
  map(List.includes(b)),
  fromMaybe(false),
)(a)

canPrecede :: Char -> Char -> Boolean
export canPrecede = (a, b) => pipe(
  Dict.get($, LETTER_HEADS),
  map(List.includes(a)),
  fromMaybe(false),
)(b)

charWalkForward :: List (Maybe Char) -> String
export charWalkForward = pipe(
  List.reduce(
    (data, j) => {
      return where(#[data.last, j]) {
        #[Nothing, Just(x)] =>
          ({ last: j, word: String.appendChar(x, data.word) })

        #[Just(prev), Just(x)] =>
          canFollow(prev, x) ? ({ last: j, word: String.appendChar(x, data.word) }) : data

        _ =>
          data
      }
    },
    { word: "", last: Nothing },
  ),
  .word,
)

charWalkBackward :: List (Maybe Char) -> String
export charWalkBackward = (raw) => pipe(
  List.reverse,
  List.reduce(
    (data, j) => {
      return where(#[data.last, j]) {
        #[Nothing, Just(x)] =>
          ({ last: j, word: String.prependChar(x, data.word) })

        #[Just(prev), Just(x)] =>
          canFollow(prev, x) ? ({ last: j, word: String.prependChar(x, data.word) }) : data

        _ =>
          data
      }
    },
    {
      word: "",
      last: pipe(
        List.last,
        fromMaybe(Nothing),
      )(raw),
    },
  ),
  .word,
)(raw)

tripleVowel :: String -> Boolean
export tripleVowel = String.match("[aeiouAEIOU][aeiouAEIOU][aeiouAEIOU]")

character :: Random -> Maybe Char -> List (Maybe Char)
export character = (r, m) => where(m) {
  Just(x) =>
    boolean(r) ? [Just(x), after(r, x)] : [before(r, x), Just(x)]

  Nothing =>
    []
}

wordlike :: Boolean -> Random -> String
export wordlike = (mode, r) => {
  count = integer(3, 7, r)
  base = chars(r, count)
  n = ""
  algo = mode ? charWalkForward : charWalkBackward
  while(String.length(n) < 4) {
    pipe(
      map(character(r)),
      List.flatten,
      algo,
      (newN) => {
        if (!tripleVowel(newN)) do {
          n := newN
        }
      },
    )(base)
  }
  return n
}
export forword = wordlike(true)
export backword = wordlike(false)

export capitalize = (str) => pipe(
  String.toUpper,
  String.firstChar,
  map(String.prependChar($, String.slice(1, String.length(str), str))),
  fromMaybe(str),
)(str)

newName :: Random -> String
export newName = (r) => pipe(
  wordlike(boolean(r)),
  capitalize,
)(r)
