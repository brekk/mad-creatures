import { Just, Nothing } from "Maybe"
import { generateFromString } from "Random"
import Set from "Set"
import { assertEquals, test } from "Test"

import {
  Creature,
  Ghost,
  age,
  clone,
  genes,
  grow,
  hasAge,
  id,
  isGhost,
  isParent,
  name,
  original,
  parent1,
  parent2,
  reproduce,
  sameCreatureInList,
} from "@/Creature"
import { Gene } from "@/Genetics"



critter = Creature(10, 10, [Gene(0, 0, "test")], 0, "nice", 0)

test(
  "isGhost",
  () => do {
    _ <- assertEquals(isGhost(critter), false)
    return assertEquals(isGhost(Ghost(0, "test", 0)), true)
  },
)
test(
  "genes",
  () => do {
    _ <- assertEquals(genes(critter), [Gene(0, 0, "test")])
    return assertEquals(genes(Ghost(0, "test", 0)), [])
  },
)

test(
  "name",
  () => do {
    _ <- assertEquals(name(critter), "nice")
    return assertEquals(name(Ghost(0, "?", 0)), "?")
  },
)

test(
  "id",
  () => do {
    _ <- assertEquals(id(critter), 0)
    return assertEquals(id(Ghost(0, "test", 0)), 0)
  },
)

test(
  "parent1",
  () => do {
    _ <- assertEquals(parent1(critter), Just(10))
    return assertEquals(parent1(Ghost(0, "test", 0)), Nothing)
  },
)

test(
  "parent2",
  () => do {
    _ <- assertEquals(parent2(critter), Just(10))
    return assertEquals(parent2(Ghost(0, "test", 0)), Nothing)
  },
)

test(
  "reproduce",
  () => do {
    seed = generateFromString("test")
    a = Creature(
      1,
      2,
      [
        Gene(0, 0, "Spotted"),
        Gene(1, 0, "Red"),
        Gene(2, 0, "Gray"),
        Gene(4, 0, "Smooth"),
        Gene(2, 0, "Black"),
      ],
      3,
      "a",
      0,
    )

    b = Creature(4, 5, [Gene(0, 0, "Spotted"), Gene(1, 0, "Red"), Gene(4, 0, "Smooth")], 6, "b", 0)
    return assertEquals(
      reproduce(seed, "newname", 7, a, b),
      Creature(
        3,
        6,
        [Gene(0, 0, "Spotted"), Gene(1, 0, "Red"), Gene(2, 0, "Black"), Gene(4, 0, "Smooth")],
        7,
        "newname",
        0,
      ),
    )
  },
)

test(
  "isParent",
  () => do {
    a = Creature(-1, -1, [], 1, "a", 0)
    b = Creature(-1, -1, [], 2, "b", 0)
    c = Creature(1, 2, [], 3, "c", 0)
    d = Creature(100, 100, [], 4, "d", 0)
    e = Creature(-1, 4, [], 5, "e", 0)
    _ <- assertEquals(isParent(d, c), false)
    _ <- assertEquals(isParent(a, c), true)
    _ <- assertEquals(isParent(d, e), true)
    _ <- assertEquals(isParent(e, d), false)
    return assertEquals(isParent(b, c), true)
  },
)

test(
  "clone",
  () => do {
    a = Creature(-1, -1, [], 1, "A", 0)
    return assertEquals(clone("B", 2, a), Creature(1, -1, [], 2, "B", 0))
  },
)

test(
  "sameCreatureInList",
  () => do {
    _ <- assertEquals(
      sameCreatureInList([Just(critter), Nothing, Just(critter), Just(critter)]),
      true,
    )
    return assertEquals(sameCreatureInList([]), false)
  },
)

test(
  "grow",
  () => do {
    _ <- assertEquals(grow(Ghost(1, "test", 3)), Ghost(1, "test", 3))
    return assertEquals(grow(Creature(0, 0, [], 0, "test", 1)), Creature(0, 0, [], 0, "test", 2))
  },
)

test("hasAge", () => assertEquals(hasAge(99, Ghost(0, "x", 100)), true))
