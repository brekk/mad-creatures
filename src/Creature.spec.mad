import { Just, Nothing } from "Maybe"
import { generateFromString } from "Random"
import Set from "Set"
import { assertEquals, test } from "Test"

import {
  Content,
  Creature,
  Ghost,
  ancestors,
  genes,
  id,
  isGhost,
  name,
  original,
  parent1,
  parent2,
  parents,
  reproduce,
} from "@/Creature"
import { Gene } from "@/Genes"



critter = original([Gene(0, 0, "test")], 0, "nice")

test(
  "isGhost",
  () => do {
    _ <- assertEquals(isGhost(critter), false)
    return assertEquals(isGhost(Ghost), true)
  },
)
test(
  "genes",
  () => do {
    _ <- assertEquals(genes(critter), [Gene(0, 0, "test")])
    return assertEquals(genes(Ghost), [])
  },
)

test(
  "name",
  () => do {
    _ <- assertEquals(name(critter), "nice")
    return assertEquals(name(Ghost), "?")
  },
)

test(
  "id",
  () => do {
    _ <- assertEquals(id(critter), 0)
    return assertEquals(id(Ghost), -1)
  },
)

test(
  "parent1",
  () => do {
    _ <- assertEquals(parent1(critter), -1)
    return assertEquals(parent1(Ghost), -1)
  },
)

test(
  "parent2",
  () => do {
    _ <- assertEquals(parent2(critter), -1)
    return assertEquals(parent2(Ghost), -1)
  },
)

test(
  "reproduce",
  () => do {
    seed = generateFromString("test")
    a = Creature(
      1,
      2,
      [
        Gene(0, 0, "Spotted"),
        Gene(1, 0, "Red"),
        Gene(2, 0, "Gray"),
        Gene(4, 0, "Smooth"),
        Gene(2, 0, "Black"),
      ],
      3,
      "a",
    )

    b = Creature(4, 5, [Gene(0, 0, "Spotted"), Gene(1, 0, "Red"), Gene(4, 0, "Smooth")], 6, "b")
    return assertEquals(
      reproduce(seed, "newname", 7, a, b),
      Creature(
        3,
        6,
        [Gene(4, 0, "Smooth"), Gene(2, 0, "Black"), Gene(1, 0, "Red"), Gene(0, 0, "Spotted")],
        7,
        "newname",
      ),
    )
  },
)

test(
  "parents",
  () => assertEquals(
    parents(
      {{
        0: original(
          [Gene(4, 0, "Smooth"), Gene(2, 0, "Black"), Gene(1, 0, "Red"), Gene(0, 0, "Spotted")],
          1,
          "a",
        ),
        1: original(
          [
            Gene(4, 0.1, "Scaly"),
            Gene(2, 0, "Yellow"),
            Gene(1, 0, "Green"),
            Gene(0, 0.1, "Banded"),
            Gene(3, 1, "Albino"),
          ],
          2,
          "b",
        ),
      }},
      Creature(0, 1, [], 3, "c"),
    ),
    #[
      Just(
        Creature(
          -1,
          -1,
          [Gene(4, 0, "Smooth"), Gene(2, 0, "Black"), Gene(1, 0, "Red"), Gene(0, 0, "Spotted")],
          1,
          "a",
        ),
      ),
      Just(
        Creature(
          -1,
          -1,
          [
            Gene(4, 0.1, "Scaly"),
            Gene(2, 0, "Yellow"),
            Gene(1, 0, "Green"),
            Gene(0, 0.1, "Banded"),
            Gene(3, 1, "Albino"),
          ],
          2,
          "b",
        ),
      ),
    ],
  ),
)

test(
  "ancestors",
  () => do {
    a = original(
      [Gene(4, 0, "Smooth"), Gene(2, 0, "Black"), Gene(1, 0, "Red"), Gene(0, 0, "Spotted")],
      1,
      "a",
    )
    b = original(
      [
        Gene(4, 0.1, "Scaly"),
        Gene(2, 0, "Yellow"),
        Gene(1, 0, "Green"),
        Gene(0, 0.1, "Banded"),
        Gene(3, 1, "Albino"),
      ],
      2,
      "b",
    )
    lookup = {{ 0: a, 1: b }}

    _ <- assertEquals(ancestors(lookup, Creature(0, -1, [], 3, "c")), Set.fromList([a]))
    _ <- assertEquals(ancestors(lookup, Creature(-1, 0, [], 3, "c")), Set.fromList([a]))
    _ <- assertEquals(ancestors(lookup, Creature(-1, -1, [], 3, "c")), Set.fromList([]))
    return assertEquals(ancestors(lookup, Creature(0, 1, [], 3, "c")), Set.fromList([a, b]))
  },
)
