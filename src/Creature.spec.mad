import { Just, Nothing } from "Maybe"
import { generateFromString } from "Random"
import Set from "Set"
import { assertEquals, test } from "Test"

import {
  Creature,
  Ghost,
  age,
  ageLimit,
  ancestors,
  clone,
  conditionalReproduce,
  genes,
  id,
  isAncestor,
  isGhost,
  isParent,
  name,
  nameFromId,
  original,
  parent1,
  parent2,
  parents,
  procreate,
  reasonNoAncestor,
  reasonNoCousins,
  reasonNoSiblings,
  reproduce,
  sameCreatureInList,
} from "@/Creature"
import { Gene } from "@/Genes"



critter = original([Gene(0, 0, "test")], 0, "nice", 0)

test(
  "isGhost",
  () => do {
    _ <- assertEquals(isGhost(critter), false)
    return assertEquals(isGhost(Ghost(0, "test", 0)), true)
  },
)
test(
  "genes",
  () => do {
    _ <- assertEquals(genes(critter), [Gene(0, 0, "test")])
    return assertEquals(genes(Ghost(0, "test", 0)), [])
  },
)

test(
  "name",
  () => do {
    _ <- assertEquals(name(critter), "nice")
    return assertEquals(name(Ghost(0, "?", 0)), "?")
  },
)

test(
  "id",
  () => do {
    _ <- assertEquals(id(critter), 0)
    return assertEquals(id(Ghost(0, "test", 0)), 0)
  },
)

test(
  "parent1",
  () => do {
    _ <- assertEquals(parent1(critter), -1)
    return assertEquals(parent1(Ghost(0, "test", 0)), -1)
  },
)

test(
  "parent2",
  () => do {
    _ <- assertEquals(parent2(critter), -1)
    return assertEquals(parent2(Ghost(0, "test", 0)), -1)
  },
)

test(
  "reproduce",
  () => do {
    seed = generateFromString("test")
    a = Creature(
      1,
      2,
      [
        Gene(0, 0, "Spotted"),
        Gene(1, 0, "Red"),
        Gene(2, 0, "Gray"),
        Gene(4, 0, "Smooth"),
        Gene(2, 0, "Black"),
      ],
      3,
      "a",
      0,
    )

    b = Creature(4, 5, [Gene(0, 0, "Spotted"), Gene(1, 0, "Red"), Gene(4, 0, "Smooth")], 6, "b", 0)
    return assertEquals(
      reproduce(seed, "newname", 7, a, b),
      Creature(
        3,
        6,
        [Gene(4, 0, "Smooth"), Gene(2, 0, "Black"), Gene(1, 0, "Red"), Gene(0, 0, "Spotted")],
        7,
        "newname",
        0,
      ),
    )
  },
)

test(
  "parents",
  () => assertEquals(
    parents(
      {{
        0: original(
          [
            Gene(4, 0.3, "Armored"),
            Gene(2, 0, "Black"),
            Gene(1, 0, "Red"),
            Gene(0, 0.1, "Camoflaged"),
          ],
          1,
          "a",
          0,
        ),
        1: original(
          [
            Gene(4, 0.1, "Scaly"),
            Gene(2, 0, "Yellow"),
            Gene(1, 0, "Green"),
            Gene(0, 0.1, "Banded"),
            Gene(3, 1, "Albino"),
          ],
          2,
          "b",
          0,
        ),
      }},
      Creature(0, 1, [], 3, "c", 0),
    ),
    #[
      Just(
        Creature(
          -1,
          -1,
          [
            Gene(4, 0.3, "Armored"),
            Gene(2, 0, "Black"),
            Gene(1, 0, "Red"),
            Gene(0, 0.1, "Camoflaged"),
          ],
          1,
          "a",
          0,
        ),
      ),
      Just(
        Creature(
          -1,
          -1,
          [
            Gene(4, 0.1, "Scaly"),
            Gene(2, 0, "Yellow"),
            Gene(1, 0, "Green"),
            Gene(0, 0.1, "Banded"),
            Gene(3, 1, "Albino"),
          ],
          2,
          "b",
          0,
        ),
      ),
    ],
  ),
)

test(
  "ancestors",
  () => do {
    a = Creature(-1, -1, [], 1, "A", 0)
    b = Creature(-1, -1, [], 2, "B", 0)
    c = Creature(-1, -1, [], 3, "C", 0)
    d = Creature(-1, -1, [], 4, "D", 0)
    e = Creature(1, 2, [], 5, "E", 0)
    f = Creature(3, 4, [], 6, "F", 0)
    g = Creature(5, 6, [], 7, "G", 0)
    lookup = {{ 1: a, 2: b, 3: c, 4: d, 5: e, 6: f, 7: g }}
    return assertEquals(
      ancestors(lookup, g),
      Set.fromList([
        Creature(-1, -1, [], 1, "A", 0),
        Creature(-1, -1, [], 2, "B", 0),
        Creature(-1, -1, [], 3, "C", 0),
        Creature(-1, -1, [], 4, "D", 0),
        Creature(1, 2, [], 5, "E", 0),
        Creature(3, 4, [], 6, "F", 0),
      ]),
    )
  },
)

test(
  "isParent",
  () => do {
    a = Creature(-1, -1, [], 1, "a", 0)
    b = Creature(-1, -1, [], 2, "b", 0)
    c = Creature(1, 2, [], 3, "c", 0)
    d = Creature(100, 100, [], 0, "d", 0)
    _ <- assertEquals(isParent(d, c), false)
    _ <- assertEquals(isParent(a, c), true)
    return assertEquals(isParent(b, c), true)
  },
)

test(
  "isAncestor",
  () => do {
    a = Creature(-1, -1, [], 1, "A", 0)
    b = Creature(-1, -1, [], 2, "B", 0)
    c = Creature(-1, -1, [], 3, "C", 0)
    d = Creature(-1, -1, [], 4, "D", 0)
    e = Creature(1, 2, [], 5, "E", 0)
    f = Creature(3, 4, [], 6, "F", 0)
    g = Creature(5, 6, [], 7, "G", 0)
    lookup = {{ 1: a, 2: b, 3: c, 4: d, 5: e, 6: f, 7: g }}
    _ <- assertEquals(isAncestor(lookup, a, g), true)
    return assertEquals(isAncestor(lookup, g, a), false)
  },
)

test(
  "ancestors",
  () => do {
    a = Creature(-1, -1, [], 1, "A", 0)
    b = Creature(-1, -1, [], 2, "B", 0)
    c = Creature(2, -1, [], 3, "C", 0)
    d = Creature(-1, 3, [], 4, "D", 0)
    lookup = {{ 1: a, 2: b, 3: c, 4: d }}
    return assertEquals(
      ancestors(lookup, d),
      Set.fromList([Creature(-1, -1, [], 2, "B", 0), Creature(2, -1, [], 3, "C", 0)]),
    )
  },
)

test(
  "clone",
  () => do {
    a = Creature(-1, -1, [], 1, "A", 0)
    return assertEquals(clone("B", 2, a), Creature(1, -1, [], 2, "B", 0))
  },
)

semiRealisticDictionary = () => {
  a = Creature(-1, -1, [], 1, "A", 0)
  b = Creature(-1, -1, [], 2, "B", 0)
  c = Creature(-1, -1, [], 3, "C", 0)
  d = Creature(-1, -1, [], 4, "D", 0)
  e = Creature(-1, -1, [], 5, "E", 0)
  f = Creature(-1, -1, [], 6, "F", 0)
  g = Creature(1, 2, [], 7, "G", 0)
  h = Creature(3, 4, [], 8, "H", 0)
  i = Creature(5, 6, [], 9, "I", 0)
  j = Creature(7, 8, [], 10, "J", 0)
  k = Creature(6, 8, [], 11, "K", 0)
  l = Creature(4, 6, [], 12, "L", 0)
  lookup = {{ 1: a, 2: b, 3: c, 4: d, 5: e, 6: f, 7: g, 8: h, 9: i, 10: j, 11: k, 12: l }}
  return { a, b, c, d, e, f, g, h, i, j, k, l, lookup }
}


test(
  "conditionalReproduce",
  () => do {
    gen = semiRealisticDictionary()
    seed = generateFromString("test")
    _ <- assertEquals(procreate(gen.lookup, seed, "test", 13, gen.a, gen.b), Nothing)
    _ <- assertEquals(
      conditionalReproduce([(_, _, _) => false], gen.lookup, seed, "test", 11, gen.a, gen.i),
      Just(Creature(1, 9, [], 11, "test", 0)),
    )
    return assertEquals(
      conditionalReproduce([(_, _, _) => true], gen.lookup, seed, "test", 12, gen.a, gen.j),
      Nothing,
    )
  },
)

test("nameFromId", () => assertEquals(nameFromId({{ 1: Creature(-1, -1, [], 1, "A", 0) }}, 1), "A"))
test(
  "age",
  () => do {
    _ <- assertEquals(age(Ghost(0, "x", 2)), 2)
    return assertEquals(age(Creature(0, 0, [], 0, "test", 100)), 100)
  },
)

test(
  "sameCreatureInList",
  () => do {
    _ <- assertEquals(sameCreatureInList([Just(critter), Just(critter)]), true)
    return assertEquals(sameCreatureInList([]), false)
  },
)

test(
  "reasonNoSiblings",
  () => do {
    gen = semiRealisticDictionary()
    _ <- assertEquals(reasonNoSiblings(gen.lookup, gen.a, gen.k), false)
    return assertEquals(reasonNoSiblings(gen.lookup, gen.j, gen.k), true)
  },
)

test(
  "reasonNoAncestor",
  () => do {
    gen = semiRealisticDictionary()
    _ <- assertEquals(reasonNoAncestor(gen.lookup, gen.a, gen.g), true)
    return assertEquals(reasonNoAncestor(gen.lookup, gen.j, gen.k), false)
  },
)

test(
  "reasonNoCousins",
  () => do {
    gen = semiRealisticDictionary()
    return assertEquals(reasonNoCousins(gen.lookup, gen.h, gen.l), true)
  },
)

test(
  "ageLimit",
  () => do {
    reason = ageLimit(5)
    gen = semiRealisticDictionary()
    _ <- assertEquals(
      reason(gen.lookup, original([], 1, "test", 10), original([], 2, "test2", 10)),
      false,
    )
    return assertEquals(reason(gen.lookup, gen.a, gen.b), true)
  },
)
