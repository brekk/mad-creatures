import type { Comparison } from "Compare"
import type { Maybe } from "Maybe"
import type { Random } from "Random"

import { EQ, GT, LT } from "Compare"
import { equals } from "Function"
import List from "List"
import { Just, Nothing, fromMaybe, isJust } from "Maybe"
import { boolean, float, integer, pick } from "Random"
import Short from "Short"



export type Gene = Gene(Short, Float, String)
derive Comparable Gene

export ALL_GENES = [
  // patterns 0
  Gene(0, 0.0, "Spotted"),
  Gene(0, 0.1, "Striped"),
  Gene(0, 0.1, "Banded"),
  Gene(0, 0.1, "Camoflaged"),
  Gene(0, 0.2, "Calico"),
  Gene(0, 0.5, "Solid"),
  // colors 1
  Gene(1, 0.0, "Red"),
  Gene(1, 0.0, "Orange"),
  Gene(1, 0.0, "Yellow"),
  Gene(1, 0.0, "Green"),
  Gene(1, 0.0, "Blue"),
  Gene(1, 0.0, "Purple"),
  Gene(1, 0.0, "Black"),
  Gene(1, 0.0, "Gray"),
  Gene(1, 0.0, "White"),
  // colors 2
  Gene(2, 0.0, "Red"),
  Gene(2, 0.0, "Orange"),
  Gene(2, 0.0, "Green"),
  Gene(2, 0.0, "Blue"),
  Gene(2, 0.0, "Purple"),
  Gene(2, 0.0, "Black"),
  Gene(2, 0.0, "Gray"),
  Gene(2, 0.0, "White"),
  // pigment 3
  Gene(3, 1.0, "Albino"),
  Gene(3, 0.2, "Vitiligo"),
  Gene(3, 0.4, "Chameleonic"),
  // skin 4
  Gene(4, 0.1, "Scaly"),
  Gene(4, 0.1, "Ridged"),
  Gene(4, 0.1, "Spiky"),
  Gene(4, 0.2, "Furry"),
  Gene(4, 0.3, "Armored"),
  Gene(4, 0.3, "Shelled"),
  Gene(4, 0.5, "Long-furred"),
  Gene(4, 0.6, "Short-furred"),
  Gene(4, 0.1, "Hairless"),
  // cool? 5
  Gene(5, 0.2, "Poisonous"),
  Gene(5, 0.1, "Venomous"),
  Gene(5, 0.9, "Non-poisonous"),
  // face accoutrements
  Gene(6, 0.1, "Horned"),
  Gene(6, 0.2, "Long-snouted"),
  Gene(6, 0.3, "Antlered"),
  Gene(6, 0.4, "Broad-antlered"),
  Gene(6, 0.3, "Prehensile-snouted"),
  // eyes
  Gene(7, 0.1, "Cycloptic"),
  Gene(7, 0.95, "Binocular"),
  Gene(7, 0.4, "Parietal-eyed"),
  Gene(7, 0.5, "Multi-eyed"),
  Gene(7, 0.3, "Compound-eyed"),
  // hearing
  Gene(8, 0.3, "Antennaed"),
  Gene(8, 0.1, "Bone-conductive"),
  Gene(8, 0.6, "Big-eared"),
  Gene(8, 0.3, "Echolocative"),
  // mouthparts
  Gene(9, 0.1, "Mandibled"),
  Gene(9, 0.3, "Tentacle-faced"),
  Gene(9, 0.2, "Setaed"),
  Gene(9, 0.3, "Proboscised"),
  Gene(9, 0.9, "Chewing"),
  // flying locomotion
  Gene(10, 0.3, "Winged"),
  Gene(10, 0.3, "Direct-flighted"),
  Gene(10, 0.1, "Indirect-flighted"),
  Gene(10, 0.9, "Non-flying"),
  // locomotion
  // SALTATION
  Gene(11, 0.3, "Jumping"),
  Gene(11, 0.8, "Bipedal"),
  Gene(11, 0.6, "Quadrupedal"),
  Gene(11, 0.5, "Octopedal"),
  Gene(11, 0.4, "Multi-legged"),
  Gene(11, 0.05, "Wheeled"),
  Gene(11, 0.1, "Rolling"),
  Gene(11, 0.2, "Undulatory"),
  Gene(11, 0.3, "Slithering"),
  Gene(11, 0.6, "Side-winding"),
  Gene(11, 0.4, "Crawling"),
  Gene(11, 0.2, "Brachiated"),
  Gene(11, 0.1, "Sliding"),
  Gene(11, 0.7, "Ungulated"),
  Gene(11, 0.2, "Anchored"),
  // underwater locomotion
  Gene(12, 0.1, "Ciliaed"),
  Gene(12, 0.1, "Flagellated"),
  Gene(12, 0.3, "Pseudopodiated"),
  Gene(12, 0.4, "Paddling"),
  Gene(12, 0.9, "Jet-propelled"),
  Gene(12, 0.8, "Undulatory"),
  Gene(12, 0.2, "Hydrofoiled"),
  Gene(12, 0.1, "Drag-powered"),
  // tails
  Gene(13, 0.2, "Short-tailed"),
  Gene(13, 0.3, "Long-tailed"),
  Gene(13, 0.2, "Stingered"),
  Gene(13, 0.1, "Scorpion-tailed"),
  Gene(13, 0.4, "Prehensile-tailed"),
]

geneIndex :: Gene -> Short
export geneIndex = where {
  Gene(s, _, _) =>
    s
}

geneExpression :: Gene -> Float
export geneExpression = where {
  Gene(_, f, _) =>
    f
}

geneName :: Gene -> String
export geneName = where {
  Gene(_, _, n) =>
    n
}

sortGene :: Gene -> Gene -> Comparison
export sortGene = (a, b) => {
  aI = geneIndex(a)
  bI = geneIndex(b)
  aE = Short.fromFloat(geneExpression(a))
  bE = Short.fromFloat(geneExpression(b))
  aX = aI + aE
  bX = bI + bE
  return if (aX == bX) {
    EQ
  } else if (aX > bX) {
    GT
  } else {
    LT
  }
}

sortGenes :: List Gene -> List Gene
export sortGenes = List.sortBy(sortGene)

sameGeneIndex :: Gene -> Gene -> Boolean
export sameGeneIndex = (a, b) => geneIndex(a) == geneIndex(b)

sameGeneExpression :: Gene -> Gene -> Boolean
export sameGeneExpression = (a, b) => geneExpression(a) == geneExpression(b)

sameGeneName :: Gene -> Gene -> Boolean
export sameGeneName = (a, b) => geneExpression(a) == geneExpression(b)

sameGene :: Gene -> Gene -> Boolean
export sameGene = (a, b) => where(#[a, b]) {
  #[Gene(a1, a2, a3), Gene(b1, b2, b3)] =>
    a1 == b1 && a2 == b2 && a3 == b3
}

justSameGene :: Maybe Gene -> Maybe Gene -> Boolean
export justSameGene = (a, b) => where(#[a, b]) {
  #[Just(x), Just(y)] =>
    sameGene(x, y)

  _ =>
    false
}

dominantGene :: Random -> Gene -> Gene -> Gene
export dominantGene = (r, a, b) => {
  ax = geneExpression(a)
  bx = geneExpression(b)
  return if (ax > bx) {
    a
  } else if (ax == bx) {
    boolean(r) ? a : b
  } else {
    b
  }
}

hasGeneByIndex :: List Gene -> Gene -> Boolean
export hasGeneByIndex = (gs, g) => pipe(
  map(geneIndex),
  List.includes(geneIndex(g)),
)(gs)

splice :: Random -> List Gene -> List Gene -> List Gene
export splice = (r, as, bs) => pipe(
  List.concat(bs),
  List.sortBy(
    (a, b) => {
      ia = geneIndex(a)
      ib = geneIndex(b)
      return ia >= ib ? LT : GT
    },
  ),
  List.reduce(
    (stack, g) => {
      has = hasGeneByIndex(stack, g)
      return if (!has) {
        List.append(g, stack)
      } else {
        map((h) => sameGeneIndex(g, h) ? dominantGene(r, g, h) : h, stack)
      }
    },
    [],
  ),
)(as)

filterByGeneIndex :: Gene -> List Gene -> List Gene
export filterByGeneIndex = (gene, genes) => pipe(
  geneIndex,
  (idx) => List.filter(
    pipe(
      geneIndex,
      equals(idx),
    ),
    genes,
  ),
)(gene)

pickByGeneIndex :: Random -> Gene -> List Gene -> Maybe Gene
export pickByGeneIndex = (r, g, genes) => pipe(
  filterByGeneIndex(g),
  pick($, r),
)(genes)

replaceGene :: Maybe Gene -> Maybe Gene -> List Gene -> List Gene
export replaceGene = (picked, matched, genes) => where(#[picked, matched]) {
  #[Just(p), Just(m)] =>
    map((y) => sameGene(y, p) ? m : y, genes)

  _ =>
    genes
}

swapFromPoolWithLimit :: Integer -> Random -> List Gene -> List Gene -> List Gene
export swapFromPoolWithLimit = (limit, r, pool, genes) => if (
  List.length(genes) < 2 || List.length(pool) < 2
) {
  []
} else do {
  picked = pick(genes, r)
  matched = Nothing
  count = 0
  pull = () => {
    count := count + 1
    matched := chain(pickByGeneIndex(r, $, pool), picked)
  }
  check = () => !isJust(matched) && !justSameGene(matched, picked) && count < limit
  while(check()) {
    pull()
  }
  return replaceGene(picked, matched, genes)
}
export swapFromPool = swapFromPoolWithLimit(10)

mutateDrop :: Random -> List Gene -> List Gene
export mutateDrop = (r, genes) => pipe(
  pick(genes),
  map((p) => List.reject(sameGene(p), genes)),
  fromMaybe(genes),
)(r)

mutateAdd :: Random -> List Gene -> List Gene -> List Gene
export mutateAdd = (r, pool, genes) => pipe(
  pick(pool),
  map(List.append($, genes)),
  fromMaybe(genes),
)(r)

mutate :: Random -> List Gene -> List Gene
export mutate = (r, genes) => {
  chance = float(r)
  return if (chance < (1 / 10)) {
    mutateDrop(r, genes)
  } else if (chance < (1 / 5)) {
    mutateAdd(r, ALL_GENES, genes)
  } else if (chance < (2 / 5)) {
    swapFromPool(r, ALL_GENES, genes)
  } else {
    genes
  }
}

uniqueByIndex :: List Gene -> Maybe Gene -> List Gene
export uniqueByIndex = (gs, mG) => where(mG) {
  Just(g) =>
    hasGeneByIndex(gs, g) ? gs : List.append(g, gs)

  Nothing =>
    gs
}

spontaneous :: Random -> List Gene -> List Gene
export spontaneous = (r, pool) => pipe(
  integer(4, 11),
  List.repeatWith((_) => pick(pool, r)),
  List.reduce(uniqueByIndex, []),
)(r)
