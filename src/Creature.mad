import type { Maybe } from "Maybe"
import type { Random } from "Random"

import type { Gene } from "@/Genetics"

import List from "List"
import { Just, Nothing } from "Maybe"
import String from "String"
import Terminal from "Terminal"

import Color from "@/Color"
import { geneName, sortGenes, splice } from "@/Genetics"



export type Creature
  = Creature(Short, Short, List Gene, Short, String, Short)
  | Ghost(Short, String, Short)

derive Comparable Creature

isGhost :: Creature -> Boolean
export isGhost = where {
  Ghost(_, _, _) =>
    true

  _ =>
    false
}

parent1 :: Creature -> Maybe Short
export parent1 = where {
  Creature(s, _, _, _, _, _) =>
    Just(s)

  _ =>
    Nothing
}

parent2 :: Creature -> Maybe Short
export parent2 = where {
  Creature(_, s, _, _, _, _) =>
    Just(s)

  _ =>
    Nothing
}

genes :: Creature -> List Gene
export genes = where {
  Creature(_, _, g, _, _, _) =>
    g

  _ =>
    []
}

name :: Creature -> String
export name = where {
  Creature(_, _, _, _, n, _) =>
    n

  Ghost(_, n, _) =>
    n
}
id :: Creature -> Short
export id = where {
  Creature(_, _, _, i, _, _) =>
    i

  Ghost(s, _, _) =>
    s
}

age :: Creature -> Short
export age = where {
  Creature(_, _, _, _, _, x) =>
    x

  Ghost(_, _, x) =>
    x
}

grow :: Creature -> Creature
export grow = where {
  Creature(p, q, g, i, n, x) =>
    Creature(p, q, g, i, n, x + 1)

  Ghost(s, n, x) =>
    Ghost(s, n, x)
}

hasAge :: Short -> Creature -> Boolean
export hasAge = (x, c) => age(c) >= x


isParent :: Creature -> Creature -> Boolean
export isParent = (p, child) => {
  rawId = id(p)
  ax = parent1(child)
  bx = parent2(child)
  return where(#[ax, bx]) {
    #[Just(a), Just(b)] =>
      rawId == a || rawId == b

    #[Nothing, Just(b)] =>
      rawId == b

    #[Just(a), Nothing] =>
      rawId == a

    _ =>
      false
  }
}

original :: List Gene -> Short -> String -> Short -> Creature
export original = Creature(-1, -1)

reproduce :: Random -> String -> Short -> Creature -> Creature -> Creature
export reproduce = (r, newName, s, a, b) => {
  ag = genes(a)
  bg = genes(b)
  mixed = splice(r, ag, bg)
  return Creature(id(a), id(b), sortGenes(mixed), s, newName, 0)
}

clone :: String -> Short -> Creature -> Creature
export clone = (newName, s, a) => Creature(id(a), -1, genes(a), s, newName, 0)

sameCreatureInList :: List (Maybe Creature) -> Boolean
export sameCreatureInList = pipe(
  map(map(id)),
  List.reduce(
    (stack, x) => if (stack.matched) {
      stack
    } else do {
      checked = List.append(x, stack.checked)
      return { checked, matched: List.includes(x, stack.checked) }
    },
    { matched: false, checked: [] },
  ),
  .matched,
)

toStringWithSeed :: String -> Creature -> String
export toStringWithSeed = (seedString, x) => {
  n = pipe(
    name,
    (raw) => pipe(
      Color.seeded(seedString),
      Terminal.ansiColor($, raw),
    )(raw),
  )(x)
  adjs = pipe(
    genes,
    map(geneName),
    map(
      (raw) => pipe(
        Color.seeded(seedString),
        Terminal.ansiColor($, raw),
      )(raw),
    ),
  )(x)
  return n ++ "\n\t\t" ++ String.join(" ", adjs)
}

export toString = toStringWithSeed("mad-creatures")
