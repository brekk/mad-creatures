import type { Maybe } from "Maybe"
import type { Random } from "Random"

import type { Gene } from "@/Genes"

import List from "List"
import { Just, Nothing } from "Maybe"

import { splice } from "@/Genes"



export type Mood = Content | Angry | Sad | Tired | Happy | Confused | Excited
export alias Internals = { focus :: #[Integer, Integer], status :: Mood }
export type Creature = Creature(Short, Short, List Gene, Short, String, Internals) | Ghost

export DEFAULT_PARTIAL_INTERNALS = { focus: #[-1, -1], status: Content }


isGhost :: Creature -> Boolean
export isGhost = where {
  Ghost =>
    true

  _ =>
    false
}

internals :: Creature -> Maybe Internals
export internals = where {
  Ghost =>
    Nothing

  Creature(_, _, _, _, _, x) =>
    Just(x)
}


parent1 :: Creature -> Short
export parent1 = where {
  Ghost =>
    -1

  Creature(s, _, _, _, _, _) =>
    s
}

parent2 :: Creature -> Short
export parent2 = where {
  Ghost =>
    -1

  Creature(_, s, _, _, _, _) =>
    s
}

genes :: Creature -> List Gene
export genes = where {
  Ghost =>
    []

  Creature(_, _, g, _, _, _) =>
    g
}

name :: Creature -> String
export name = where {
  Creature(_, _, _, _, n, _) =>
    n

  Ghost =>
    "?"
}
id :: Creature -> Short
export id = where {
  Creature(_, _, _, i, _, _) =>
    i

  Ghost =>
    -1
}

original :: List Gene -> Short -> String -> Internals -> Creature
export original = Creature(-1, -1)


reproduce :: Random -> String -> Short -> Creature -> Creature -> Creature
export reproduce = (r, newName, s, a, b) => {
  ag = genes(a)
  bg = genes(b)
  mixed = splice(r, ag, bg)
  return Creature(id(a), id(b), mixed, s, newName, DEFAULT_PARTIAL_INTERNALS)
}
