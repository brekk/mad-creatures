import type { Maybe } from "Maybe"
import type { Random } from "Random"

import type { Gene } from "@/Genes"

import Dict from "Dictionary"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"
import Set from "Set"

import { splice } from "@/Genes"



export type Creature
  = Creature(Short, Short, List Gene, Short, String, Short)
  | Ghost(Short, String, Short)

derive Comparable Creature

isGhost :: Creature -> Boolean
export isGhost = where {
  Ghost(_, _, _) =>
    true

  _ =>
    false
}

parent1 :: Creature -> Short
export parent1 = where {
  Creature(s, _, _, _, _, _) =>
    s

  _ =>
    -1
}

parent2 :: Creature -> Short
export parent2 = where {
  Creature(_, s, _, _, _, _) =>
    s

  _ =>
    -1
}

genes :: Creature -> List Gene
export genes = where {
  Creature(_, _, g, _, _, _) =>
    g

  _ =>
    []
}

name :: Creature -> String
export name = where {
  Creature(_, _, _, _, n, _) =>
    n

  Ghost(_, n, _) =>
    n
}
id :: Creature -> Short
export id = where {
  Creature(_, _, _, i, _, _) =>
    i

  Ghost(s, _, _) =>
    s
}

age :: Creature -> Short
export age = where {
  Creature(_, _, _, _, _, x) =>
    x

  Ghost(_, _, x) =>
    x
}

parents :: Dictionary Short Creature -> Creature -> #[Maybe Creature, Maybe Creature]
export parents = (lookup, c) => {
  getter = Dict.get($, lookup)
  p1 = parent1(c)
  p2 = parent2(c)
  return #[getter(p1), getter(p2)]
}

isParent :: Creature -> Creature -> Boolean
export isParent = (p, child) => {
  rawId = id(p)
  a = parent1(child)
  b = parent2(child)
  return rawId == a || rawId == b
}

ancestors :: Dictionary Short Creature -> Creature -> Set Creature
export ancestors = (lookup, c) => {
  ax = []
  walk :: Creature -> List Creature
  walk = pipe(
    parents(lookup),
    where {
      #[Just(a), Just(b)] =>
        [a, b]

      #[Just(a), Nothing] =>
        [a]

      #[Nothing, Just(b)] =>
        [b]

      _ =>
        []
    },
    (y) => {
      ax := List.concat(ax, y)
      return map(walk, y)
    },
  )
  walk(c)
  return Set.fromList(ax)
}

isAncestor :: Dictionary Short Creature -> Creature -> Creature -> Boolean
export isAncestor = (lookup, parent, c) => pipe(
  ancestors(lookup),
  Set.toList,
  map(id),
  List.includes(id(parent)),
)(c)

original :: List Gene -> Short -> String -> Short -> Creature
export original = Creature(-1, -1)

reproduce :: Random -> String -> Short -> Creature -> Creature -> Creature
export reproduce = (r, newName, s, a, b) => {
  ag = genes(a)
  bg = genes(b)
  mixed = splice(r, ag, bg)
  return Creature(id(a), id(b), mixed, s, newName, 0)
}

clone :: String -> Short -> Creature -> Creature
export clone = (newName, s, a) => Creature(id(a), -1, genes(a), s, newName, 0)

alias Reason = Dictionary Short Creature -> Creature -> Creature -> Boolean

reasonNoAncestor :: Reason
export reasonNoAncestor = (lookup, a, b) => {
  check = isAncestor(lookup)
  return check(a, b) || check(b, a)
}

sameCreatureInList :: List (Maybe Creature) -> Boolean
export sameCreatureInList = pipe(
  map(map(id)),
  (ids) => List
    .reduce(
      (stack, x) => if (stack.matched) {
        stack
      } else do {
        checked = List.append(x, stack.checked)
        return if (List.includes(x, stack.checked)) {
          { matched: true, checked }
        } else {
          { matched: false, checked }
        }
      },
      { matched: false, checked: [] },
      ids,
    )
    .matched,
)

reasonNoSiblings :: Reason
export reasonNoSiblings = (_, a, b) => {
  aM = parent1(a)
  aD = parent2(a)
  bM = parent1(b)
  bD = parent2(b)
  return aM == bM || aM == bD || aD == bM || aD == bD
}

reasonNoCousins :: Reason
export reasonNoCousins = (lookup, a, b) => {
  anc = ancestors(lookup)
  x = anc(a)
  y = anc(b)
  lx = Set.length(x)
  ly = Set.length(y)
  return lx + ly > Set.length(Set.merge(x, y))
}

conditionalReproduce :: List Reason
  -> Dictionary Short Creature
  -> Random
  -> String
  -> Short
  -> Creature
  -> Creature
  -> Maybe Creature
export conditionalReproduce = (checks, lookup, r, newName, s, a, b) => if (
  List.any((check) => check(lookup, a, b), checks)
) {
  Nothing
} else {
  Just(reproduce(r, newName, s, a, b))
}

ageLimit :: Short -> Reason
export ageLimit = (limit) => (_, a, b) => age(a) < limit || age(b) < limit

export procreate = conditionalReproduce([
  reasonNoCousins,
  reasonNoSiblings,
  reasonNoAncestor,
  ageLimit(5),
])

nameFromId :: Dictionary Short Creature -> Short -> String
export nameFromId = (creatures, s) => pipe(
  Dict.get(s),
  map(name),
  fromMaybe("?"),
)(creatures)
