import type { Random } from "Random"

import type { Gene } from "@/Genes"

import List from "List"
import R from "Random"

import { splice } from "@/Genes"



export type Mood = Content | Angry | Sad | Tired | Happy | Confused | Excited
export alias Internals = { focus :: #[Integer, Integer], status :: Mood }
export type Creature = Creature(Short, Short, List Gene, Short, String, Internals) | Ghost

export DEFAULT_PARTIAL_INTERNALS = { focus: #[-1, -1], status: Content }


isGhost :: Creature -> Boolean
export isGhost = where {
  Ghost =>
    true

  _ =>
    false
}

genes :: Creature -> List Gene
export genes = where {
  Ghost =>
    []

  Creature(_, _, g, _, _, _) =>
    g
}

creatureName :: Creature -> String
export creatureName = where {
  Creature(_, _, _, _, n, _) =>
    n

  Ghost =>
    "?"
}
creatureId :: Creature -> Short
export creatureId = where {
  Creature(_, _, _, i, _, _) =>
    i

  Ghost =>
    -1_s
}

original :: List Gene -> Short -> String -> Internals -> Creature
export original = Creature(-1_s, -1_s)

reproduce :: Random -> String -> Short -> Creature -> Creature -> Creature
export reproduce = (r, name, s, a, b) => {
  ag = genes(a)
  bg = genes(b)
  mixed = splice(r, ag, bg)
  return Creature(creatureId(a), creatureId(b), mixed, s, name, DEFAULT_PARTIAL_INTERNALS)
}
