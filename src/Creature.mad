import type { Maybe } from "Maybe"
import type { Random } from "Random"

import type { Gene } from "@/Genetics"

import List from "List"

import { splice } from "@/Genetics"



export type Creature
  = Creature(Short, Short, List Gene, Short, String, Short)
  | Ghost(Short, String, Short)

derive Comparable Creature

isGhost :: Creature -> Boolean
export isGhost = where {
  Ghost(_, _, _) =>
    true

  _ =>
    false
}

parent1 :: Creature -> Short
export parent1 = where {
  Creature(s, _, _, _, _, _) =>
    s

  _ =>
    -1
}

parent2 :: Creature -> Short
export parent2 = where {
  Creature(_, s, _, _, _, _) =>
    s

  _ =>
    -1
}

genes :: Creature -> List Gene
export genes = where {
  Creature(_, _, g, _, _, _) =>
    g

  _ =>
    []
}

name :: Creature -> String
export name = where {
  Creature(_, _, _, _, n, _) =>
    n

  Ghost(_, n, _) =>
    n
}
id :: Creature -> Short
export id = where {
  Creature(_, _, _, i, _, _) =>
    i

  Ghost(s, _, _) =>
    s
}

age :: Creature -> Short
export age = where {
  Creature(_, _, _, _, _, x) =>
    x

  Ghost(_, _, x) =>
    x
}

grow :: Creature -> Creature
export grow = where {
  Creature(p, q, g, i, n, x) =>
    Creature(p, q, g, i, n, x + 1)

  Ghost(s, n, x) =>
    Ghost(s, n, x)
}

hasAge :: Short -> Creature -> Boolean
export hasAge = (x, c) => age(c) >= x


isParent :: Creature -> Creature -> Boolean
export isParent = (p, child) => {
  rawId = id(p)
  a = parent1(child)
  b = parent2(child)
  return rawId == a || rawId == b
}

original :: List Gene -> Short -> String -> Short -> Creature
export original = Creature(-1, -1)

reproduce :: Random -> String -> Short -> Creature -> Creature -> Creature
export reproduce = (r, newName, s, a, b) => {
  ag = genes(a)
  bg = genes(b)
  mixed = splice(r, ag, bg)
  return Creature(id(a), id(b), mixed, s, newName, 0)
}

clone :: String -> Short -> Creature -> Creature
export clone = (newName, s, a) => Creature(id(a), -1, genes(a), s, newName, 0)

sameCreatureInList :: List (Maybe Creature) -> Boolean
export sameCreatureInList = pipe(
  map(map(id)),
  (ids) => List
    .reduce(
      (stack, x) => if (stack.matched) {
        stack
      } else do {
        checked = List.append(x, stack.checked)
        return if (List.includes(x, stack.checked)) {
          { matched: true, checked }
        } else {
          { matched: false, checked }
        }
      },
      { matched: false, checked: [] },
      ids,
    )
    .matched,
)
