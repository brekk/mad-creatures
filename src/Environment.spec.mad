import Dict from "Dictionary"
import IO from "IO"
import List from "List"
import { fromMaybe } from "Maybe"
import { generateFromString, integer, pick } from "Random"
import Set from "Set"
import { assertEquals, test } from "Test"

import { Creature } from "@/Creature"
import { addRandomCreature, create, parthenogenesis } from "@/Environment"
import { Gene } from "@/Genetics"



test(
  "create",
  () => do {
    seed = generateFromString("test")
    env = create(seed)
    return assertEquals(env.counter() == 1, true)
  },
)

test(
  "addRandomCreature",
  () => do {
    env = create(generateFromString("test"))
    _ <- assertEquals(env.creatures, {{}})
    env2 = addRandomCreature(env)
    return assertEquals(
      env2.creatures,
      {{
        1: Creature(
          -1,
          -1,
          [
            Gene(6, 0.2, "Long-snouted"),
            Gene(7, 0.95, "Binocular"),
            Gene(10, 0.3, "Winged"),
            Gene(11, 0.2, "Undulatory"),
            Gene(12, 0.8, "Undulatory"),
          ],
          1,
          "Onalivu",
          0,
        ),
      }},
    )
  },
)

test(
  "parthenogenesis",
  () => do {
    env = create(generateFromString("test"))
    _ <- assertEquals(env.creatures, {{}})
    env2 = pipe(
      addRandomCreature,
      addRandomCreature,
      addRandomCreature,
      parthenogenesis,
    )(env)
    return assertEquals(
      env2.creatures,
      {{
        1: Creature(
          -1,
          -1,
          [
            Gene(6, 0.2, "Long-snouted"),
            Gene(7, 0.95, "Binocular"),
            Gene(10, 0.3, "Winged"),
            Gene(11, 0.2, "Undulatory"),
            Gene(12, 0.8, "Undulatory"),
          ],
          1,
          "Onalivu",
          0,
        ),
        2: Creature(
          -1,
          -1,
          [
            Gene(2, 0, "Green"),
            Gene(4, 0.1, "Ridged"),
            Gene(8, 0.6, "Big-eared"),
            Gene(9, 0.1, "Mandibled"),
            Gene(11, 0.3, "Jumping"),
          ],
          2,
          "Unaletit",
          0,
        ),
        3: Creature(
          -1,
          -1,
          [
            Gene(1, 0, "Purple"),
            Gene(2, 0, "Red"),
            Gene(3, 1, "Albino"),
            Gene(13, 0.2, "Stingered"),
          ],
          3,
          "Avureufim",
          0,
        ),
        4: Creature(
          2,
          -1,
          [
            Gene(2, 0, "Green"),
            Gene(4, 0.1, "Ridged"),
            Gene(8, 0.6, "Big-eared"),
            Gene(9, 0.1, "Mandibled"),
            Gene(11, 0.3, "Jumping"),
          ],
          4,
          "Fobuowix",
          0,
        ),
      }},
    )
  },
)

test(
  "genesis",
  () => do {
    seed = generateFromString("test")
    env = create(seed)
    _ <- assertEquals(env.creatures, {{}})
    env2 = pipe(
      addRandomCreature,
      addRandomCreature,
      addRandomCreature,
      addRandomCreature,
      addRandomCreature,
      addRandomCreature,
      addRandomCreature,
      addRandomCreature,
      .creatures,
      (cx) => pipe(
        // IO.pTrace("CREATURES"),
        Dict.keys,
        (k) => List.repeatWith((_) => pick(k, seed), integer(2, 6, seed)),
        map(fromMaybe(-1)),
        Set.fromList,
        Set.toList,
        IO.pTrace("raw"),
        map(Dict.get($, cx)),
        IO.pTrace("gotten"),
      )(cx),
    )(env)
    return assertEquals(true, true)
  },
)
