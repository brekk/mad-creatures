import type { Random } from "Random"

import type { Creature, Mood } from "@/Creature"
import type { Gene } from "@/Genes"

import IO from "IO"
import List from "List"
import { Just, Nothing } from "Maybe"
import { generateFromString } from "Random"

import Creature from "@/Creature"
import Env from "@/Environment"



// generate :: List Creature -> List Creature
// generate = (critters) => pipe(
//   List.reduce((env, critter) => {

//   },
//   { seed, counter, creatures: []}
// )(critters)


/*
jocomo = YellowSpotted(counter(), "Jocomo", { focus: #[0, 0], status: Content })
skimini = WhiteStriped(counter(), "Skimini", { focus: #[0, 0], status: Content })
spantix = WhiteStriped(counter(), "Spantix", { focus: #[0, 0], status: Content })
glynk = original(
  [GENES.red, GENES.calico, GENES.albino],
  counter(),
  "Glynk",
  { focus: #[0, 0], status: Content },
)
IO.pTrace(
  "creatures!",
  #[
    reproduce(seed, "Comini", counter(), jocomo, skimini),
    reproduce(seed, "Jikimo", counter(), jocomo, skimini),
    reproduce(seed, "Jokomi", counter(), jocomo, skimini),
    reproduce(seed, "Spantini", counter(), spantix, skimini),
    reproduce(seed, "Glyntix", counter(), glynk, spantix),
    reproduce(seed, "Glyncomo", counter(), glynk, jocomo),
    reproduce(seed, "Jocontix", counter(), jocomo, spantix),
  ],
)
*/

main = () => {
  seed = generateFromString("creature-0.0.1")
  env = Env.create(seed)
  IO.pTrace("ENVIRONMENT", env)
  starting = pipe(
    Env.addRandomCreature,
    Env.addRandomCreature,
    Env.addRandomCreature,
    Env.addRandomCreature,
    Env.addRandomCreature,
    Env.addRandomCreature,
  )(env)
  pipe(
    .creatures,
    map(Creature.name),
    IO.pTrace("starting creatures!"),
  )(starting)
  // List.reduce((ex, _) => Env.iter(ex), starting, starting)
}
