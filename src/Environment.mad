import type { Random } from "Random"

import type { Register } from "@/Register"

import Dict from "Dictionary"
import IO from "IO"
import { fromMaybe } from "Maybe"
import { integer, pick } from "Random"
import String from "String"

import Creature from "@/Creature"
import { ALL_GENES, sortGenes, spontaneous } from "@/Genetics"
import { makeCounter } from "@/Helpers"
import { newName } from "@/Language"
import {
  addCreature,
  dropCreature,
  maybeAddCreatures,
  nextGen,
  selectRandomCreatures,
} from "@/Register"



export alias Environment = {
  counter :: {} -> Short,
  creatures :: Register,
  generation :: Short,
  seed :: Random,
}

create :: Random -> Environment
export create = (seed) => {
  return { counter: makeCounter(), seed, creatures: {{}}, generation: 0 }
}

addRandomCreature :: Environment -> Environment
export addRandomCreature = (env) => {
  id = env.counter()
  genes = sortGenes(spontaneous(env.seed, ALL_GENES))
  newN = newName(env.seed)
  newCreature = Creature.Creature(-1, -1, genes, id, newN, 0)
  return {
    generation: env.generation,
    counter: env.counter,
    seed: env.seed,
    creatures: addCreature(newCreature, env.creatures),
  }
}

removeRandomCreature :: Integer -> Environment -> Environment
export removeRandomCreature = (probability, env) => {
  id = env.counter()
  genes = sortGenes(spontaneous(env.seed, ALL_GENES))
  newN = newName(env.seed)
  // newCreature = Creature.Creature(-1, -1, genes, id, newN, 0)
  remove = integer(0, probability, env.seed) == probability
  IO.pTrace("removing?", remove)
  return {
    generation: env.generation,
    counter: env.counter,
    seed: env.seed,
    creatures: remove ? dropCreature(env.seed, env.creatures) : env.creatures,
  }
}

parthenogenesis :: Environment -> Environment
export parthenogenesis = (env) => {
  id = env.counter()
  newN = newName(env.seed)
  creatures = pipe(
    Dict.values,
    pick($, env.seed),
    map(
      pipe(
        Creature.clone(newN, id),
        addCreature($, env.creatures),
      ),
    ),
    fromMaybe(env.creatures),
  )(env.creatures)
  return { ...env, creatures }
}

season :: Environment -> Environment
export season = (env) => {
  return { ...env, generation: env.generation + 1, creatures: map(Creature.grow, env.creatures) }
}

genesis :: Environment -> Environment
export genesis = (env) => removeRandomCreature(
  3,
  {
    ...env,
    creatures: pipe(
      selectRandomCreatures(env.seed),
      nextGen(env.seed, env.creatures, env.counter()),
      maybeAddCreatures(env.creatures),
    )(env.creatures),
  },
)

generation :: Environment -> Environment
export generation = pipe(
  season,
  (x) => {
    total = Dict.length(x.creatures)
    return if (total == 1) {
      parthenogenesis(x)
    } else {
      genesis(x)
    }
  },
)

renderCreatures = pipe(
  Dict.values,
  map(Creature.toString),
  String.join("\n\t"),
)

toString :: Environment -> String
export toString = (env) => `${IO.green("generation")}: ${show(env.generation)}\n${
  IO.yellow("creatures")
}:\n\n\t${renderCreatures(env.creatures)}`
